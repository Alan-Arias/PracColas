//---------------------------------------------------------------------------

//#pragma hdrstop

#include "UCola.h"
#include <vcl.h>

typedef int Tipo;
const Max=50;
class Cola{
		private:
			Tipo V[Max+1];
			int Frente,Atras;
		public:
				Cola();
				// Produce un Self vacío
				void Meter(Tipo dato);
				//Pre: La cola no está llena
				//Inserta el dato al final de la Cola
				void MeterStr(String dato);

				void Sacar(Tipo &dato);
				//Pre: La cola no está vacía
				// Obtiene en dato el primer elemento de la Cola, eliminándolo  de la misma.
				int SacarUltimo();

				int Medio();

				bool Vacia();
				// Retorna true si y solo si la Cola está vacía, y false en caso contrario.
				bool  Llena();
				// Retorna true si y solo si la Cola está llena, y false en caso contrario.
				int Cant();
				//Retorna la cantidad de elementos del Self
				void Borrar();
				//Pre: La cola no está vacía
				// Borrar el primer elemento de la Cola
				Tipo Primero();
				// Retorna el primer elemento de la Cola
				String toString();
};

Cola::Cola(){
// Produce un Self vacío
	Frente=Atras=-1;
}

void Cola::Meter(Tipo dato){
	if (Llena()) {
		ShowMessage("Error Cola llena");
		exit(1);
	}

	if((Frente==-1)&&(Atras==-1)){ // 1er inserción cuando la cola está vacía
		Frente=Atras=0;
		V[Atras]= dato;
	}
	else{
		Atras++;
		if (Atras>Max)
			Atras=0;
		V[Atras]=dato;
	}
}

void Cola::Sacar(Tipo &dato){
//Pre: La cola no está vacía
// Obtiene en dato el primer elemento de la Cola, eliminándolo  de la misma.

	if (Vacia()) {
		ShowMessage("Error: Cola vacía");
		exit(1);
	}

	dato = V[Frente];
	if(Frente==Atras)
		Frente=Atras=-1;
	else{
		Frente++;
		if(Frente>Max)
			Frente=0;
	}
}

bool Cola::Vacia(){
// Retorna true si y solo si la Cola está vacía, y false en caso contrario.
	return((Frente==-1)&&(Atras==-1));
}

bool  Cola::Llena(){
// Retorna true si y solo si la Cola está llena, y false en caso contrario.
   int aux = Atras;
   aux++;
   if (aux>Max)
		aux=0;
   return (aux==Frente);

}
/*bool Cola::Llena(){
	return (Cant()==Max+1);
} */

int Cola::Cant(){
//Retorna la cantidad de elementos del Self
	if(Atras>=Frente)
		return (Atras-Frente+1);
	else
		return(Atras+1)+(Max-Frente+1);
}

void Cola::Borrar(){
//Pre: La cola no está vacía
// Borrar el primer elemento de la Cola
	if (Vacia()) {
		ShowMessage("Error: Cola vacía");
		exit(1);
	}
	if(Frente==Atras)
		Frente=Atras=-1;
	else{
		Frente++;
		if(Frente>Max)
			Frente=0;
	}
}
Tipo Cola::Primero(){
// Retorna el primer elemento de la Cola
	if (Vacia()) {
		ShowMessage("Error: Cola vacía");
		exit(1);
	}

	return V[Frente];
}
Tipo Cola::SacarUltimo()
{
	if (Vacia())
	{
		ShowMessage("Error: Cola vacía");
		exit(1);
	}
	return V[Atras];
}
void Cola::MeterStr(String dato){
	if((Frente==-1)&&(Atras==-1)){ // 1er inserción cuando la cola está vacía
		Frente=Atras=0;
		V[Atras]= dato;
	}
	else{
		Atras++;
		if (Atras>Max)
			Atras=0;
		V[Atras]=dato;
	}
}
String Cola::toString(){
	String cad="";
	int k = Frente;
	while(k!=Atras){
		cad = cad + IntToStr(V[k])+" , ";
		k++;
		if(k>Max)
			k=0;
	}
	cad = cad + IntToStr(V[Atras]);
	return cad;
}

//---------------------------------------------------------------------------
//#pragma package(smart_init)
